
 CHECK - ".. en eller flera förändringar av koden i applikationen .." --> CHECK - uppdated "hello world" to hello devops world" in handlers_test.go and handlers.go.


Instruktioner
Demo/Exempel-applikationen går att hitta på GitHub.
1.	CHECK - Skapa ett nytt repository under ert egna konto --> CHECK SANDBOX TEST
2.	Klona demo-applikationen: 
–	CHECK - (HTTPS) git clone [REDACTED] (Vanligast med Windows) --> CHECK SANDBOX TEST
–	(SSH) git clone git@github.com:[REDACTED] (Vanligast med macOS/Linux)
3.	CHECK - Ställ i er i katalogen för det som ni har klonat: cd nackademin-helloworld --> CHECK SANDBOX TEST
4.	Uppdatera remote:
–	CHECK - (HTTPS) git set-url origin https://github.com/<användare>/[REDACTED] --> CHECK SANDBOX TEST
–	(SSH) git clone git@github.com:<användare>/[REDACTED]
5.	CHECK - Ladda upp till er egna remote: git push --> CHECK SANDBOX TEST
Nu kan ni börja arbeta och ladda upp era förändringar mot ert egna repo.
Instruktioner på att konfigurera Git lokalt.
 
Kriterier
Git
	CHECK - Skapa ett nytt Git repo i GitHub --> CHECK SANDBOX TEST
	CHECK - Klonat exempel-applikationen och använda det som bas för sitt egna repo --> CHECK SANDBOX TEST
	CHECK - Skapat en ny branch och gjort en förändring (se nedan under Tips för exempel) --> CHECK SANDBOX TEST
	CHECK - Push på förändring med branch till repo --> CHECK SANDBOX TEST
	CHECK - Merge på den nya branchen in i main --> CHECK SANDBOX TEST
Extra
	CHECK - Merge in i main sker via en Pull request - CHECK SANDBOX TEST VIAG ITHUB
	CHECK - Commit-meddelande vid förändringar är välformulerade (för tips på välformulerade commits se nedan) --> CHECK, READ AND WILL INCORPORATE -> https://gist.github.com/rishavpandey43/84665ffe3cea76400d8e5a1ad7133a79 
	CHECK - Pull request-meddelande är välformulerat --> CHECK, READ AND WILL INCORPORATE --> https://gist.github.com/rishavpandey43/84665ffe3cea76400d8e5a1ad7133a79
För tips om välformulerade commit- och pull request-meddelande se nedan under Tips
CI/CD
	CHECK - Ett GitHub Action workflow som testar applikationen på merge med main (CI) - CHECK -> test_main.merge.yml
	CHECK - Ett GitHub Action workflow som skapar en Docker (container) image och laddar upp den i GitHub Packages (Container registry) på merge med main (CD) - CHECK -> docker_on_main_merge.yml
Dessa två moment kan ingå i samma workflow-fil.
Extra
	CHECK - Workflow för test av applikation körs när en pull request mot main utförs (CI) --> CHECK - Added test to test_pullrequest_main.yml
	CHECK - Workflow för test av applikation körs när en push sker mot en branch med prefixet dev (CI) --> CHECK - Added superlinter feature that targets pushed branches with prefix dev.
	CHECK - Workflow för Docker Image och GitHub packages sker bara när en särskild tag används (t.ex en tag med en ny version) --> CHECK - docker_on_main_merge.yml solves this.
			Övrig kreativitet i workflow är meriterande
För vägledning om hur dessa mer avancerade triggers kan göra, se dokumentation för GitHub Actions och Triggers


//Det som ska lämnas in i studentportalen är länken till Githubrepositoriet. 
Som t.ex en .txt fil

 
Tips
Uppdatera remote
Viktigt är att eleven efter att ha klonat applikationen, uppdaterar “remote” till det repository eleven skapat själv:
git remote set-url origin <nytt-repository>
Kodförändring
Exempel på förändring i applikationen: 1. Öppna filen server/handlers.go och ändra strängen "Hello, world!" på rad 9 till något annat. Spara. 2. Öppna filen server/handlers_test.go och gör motsvarande förändring på rad 11. Spara
Commit- och Pull request-meddelande
Ett välformulerat commit-meddelande beskriver kort vad förändringen gör (och gärna då vad som händer om man använder sig av den commit:en).
Om t.ex en ny endpoint för en HTTP server lagts till, så är ett bra commit-meddelande: Add new endpoint for the HTTP server.
Vad då avser Pull request-meddelande så skulle det vara:
This pull requests adds a new endpoint for the HTTP server.

<Ytterligare information vad förändringen medför>
För mer information om commit- och pull request-meddelande se följande länkar: - How to Write a Git Commit Message - Conventional commits
Build och test
Applikationen är skriven i Go och README.md har instruktioner på hur saker ska göras med i avseende med kompilering och tester. Ytterligare information om hur detta kan göras i Workflow finns på GitHub Actions dokumentation (under avsnittet Build and test i menyn till höger)
För information kring att bygga en Docker image och ladda upp den till GitHub packages se Publish Docker images
